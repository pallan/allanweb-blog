<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Peer's Corner]]></title>
  <link href="http://allanweb.ca/atom.xml" rel="self"/>
  <link href="http://allanweb.ca/"/>
  <updated>2014-02-14T11:41:55-06:00</updated>
  <id>http://allanweb.ca/</id>
  <author>
    <name><![CDATA[Peer Allan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using SMTP Settings in Squash]]></title>
    <link href="http://allanweb.ca/blog/2014/02/14/using-smtp-settings-in-squash/"/>
    <updated>2014-02-14T11:21:00-06:00</updated>
    <id>http://allanweb.ca/blog/2014/02/14/using-smtp-settings-in-squash</id>
    <content type="html"><![CDATA[<p>Recently, we started using <a href="https://github.com/SquareSquash/web">Squash</a>
to monitor exceptions from our company&rsquo;s internal applications.</p>

<p>We soon discovered, however, that we were not receiving emails from
Squash to notify us of errors. It turns out that by default Squash&rsquo;s
email setting use a localhost email configuration. For security reasons
our servers do not have these services enabled on servers that do not
require it. Therefore, we had to update Squash to send via our internal
Exchange system. This is how we did it.</p>

<h3>Add additional Gem requirements</h3>

<p>We needed to use NTLM authentication so we added <code>ruby-ntlm</code> to the
Gemfile and tell it to only require the SMTP settings.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'ruby-ntlm', require: 'ntlm/smtp'</span></code></pre></td></tr></table></div></figure>


<h3>ActionMailer Settings</h3>

<p>Squash uses Configoro to manage configurations which is not complicated to
use but we needed a quick fix to get things operating as we needed. As
such we added a new initializer with our settings:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config/initializers/mail.rb</span>
</span><span class='line'>
</span><span class='line'><span class="ss">ActionMailer</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">smtp_settings</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">:address</span>  <span class="o">=&gt;</span> <span class="s2">&quot;mail.host&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:port</span>  <span class="o">=&gt;</span> <span class="mi">25</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:domain</span>  <span class="o">=&gt;</span> <span class="s1">&#39;example.com&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:user_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;USER&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="s1">&#39;PASS&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:authentication</span> <span class="o">=&gt;</span> <span class="ss">:ntlm</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:enable_starttls_auto</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A quick app restart and email was back in business.</p>

<p>We have forked Squash and are working on a &lsquo;proper&rsquo; solution for this
that we will submit back to the project as a Pull Request. I will try to
update this post when that patch is available and/or merged in.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dealing with Rails 4 Deprecations]]></title>
    <link href="http://allanweb.ca/blog/2013/11/10/dealing-with-rails-4-deprecations/"/>
    <updated>2013-11-10T11:21:00-06:00</updated>
    <id>http://allanweb.ca/blog/2013/11/10/dealing-with-rails-4-deprecations</id>
    <content type="html"><![CDATA[<p>At my place of employment we have a very large Rails application that
runs many parts of the business. The app was started on Rails 2.0 and went
into production under Rails 2.3. It was only recently that we were able
to get it updated to Rails 3.2 and Ruby 2.0. We the took a shot at getting
it running under Rails 4. It took a few hours to get the site to load and
the tests to run. We triggered a build in Jenkins proceeded to watch the
console drown in DEPRECATION warnings.</p>

<p>Most of these deprecations were directly related to the eventual
removal of the old ActiveRecord finder syntax to the newer Arel syntax
initially adopted in Rails 3. Here are some examples,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DEPRECATION WARNING: Calling #find(:all) is deprecated. Please call #all directly instead. ...
</span><span class='line'>DEPRECATION WARNING: Calling #find(:first) is deprecated. Please call #first directly instead.
</span><span class='line'>DEPRECATION WARNING: Calling #scope or #default_scope with a hash is deprecated. Please use a lambda containing a scope.
</span><span class='line'>DEPRECATION WARNING: Passing options to #find is deprecated. Please build a scope and then call #find on it
</span><span class='line'>DEPRECATION WARNING: Relation#all is deprecated. If you want to eager-load a relation, you can call #load
</span><span class='line'>DEPRECATION WARNING: Relation#first with finder options is deprecated. Please build a scope and then call #first on it instead.
</span><span class='line'>DEPRECATION WARNING: The following options in your Model.has_many :notes declaration are deprecated: ...</span></code></pre></td></tr></table></div></figure>


<h2>Enter Arel Converter</h2>

<p>The <a href="https://github.com/pallan/arel_converter">arel_converter</a> gem is a simple command line utility that uses parses
Ruby files to find code whose syntax will be deprecated under Rails 4
and converts it to be Rails 4 compatible. The converters use Ruby2Ruby
and RubyParser to convert to and translate s-expressions. This ensures
the code is converter back into valid Ruby code. Fancy regex and string
parsing just doesn&rsquo;t work as well.</p>

<p>Presently, there are 3 converters,</p>

<h3>Scope</h3>

<p>Converts &lsquo;scope&rsquo; statements into the updated Rails 4 syntax, i.e.
wrapped in a lambda, with pre-Arel options converted to Arel</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">scope</span> <span class="ss">:active</span><span class="p">,</span> <span class="ss">:conditions</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:active</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">},</span> <span class="ss">:order</span> <span class="o">=&gt;</span> <span class="s1">&#39;created_at&#39;</span>
</span><span class='line'><span class="c1"># becomes</span>
</span><span class='line'><span class="n">scope</span> <span class="ss">:active</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">active</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="s1">&#39;created_at&#39;</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Associations</h3>

<p>Updates associations to use the updated Rails 4 syntax, i.e. wrapped in
lambdas where necessary. Association types handled are,</p>

<ul>
<li>belongs_to</li>
<li>has_one</li>
<li>has_many</li>
<li>has_and_belongs_to_many</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">has_many</span> <span class="ss">:articles</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Post&quot;</span><span class="p">,</span> <span class="ss">:order</span> <span class="o">=&gt;</span> <span class="s1">&#39;updated_at DESC&#39;</span>
</span><span class='line'><span class="c1"># becomes</span>
</span><span class='line'><span class="n">has_many</span> <span class="ss">:articles</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">order</span><span class="p">(</span><span class="s1">&#39;updated_at DESC&#39;</span><span class="p">)</span> <span class="p">},</span> <span class="n">class_name</span><span class="p">:</span> <span class="s2">&quot;Post&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Finders</h3>

<p>Updates old ActiveRecord (pre Rails 3) syntax into Arel syntax of
chained Relations. This handles the following, including chained calls,</p>

<ul>
<li>Object.find(:all</li>
<li>Object.find(:first</li>
<li>Object.find.*:conditions</li>
<li>Object.all(</li>
<li>Object.first(</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="ss">:all</span><span class="p">,</span> <span class="ss">:conditions</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;name = ?&#39;</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:term</span><span class="o">]]</span><span class="p">,</span> <span class="ss">:limit</span> <span class="o">=&gt;</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="c1"># becomes</span>
</span><span class='line'><span class="no">Model</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s1">&#39;name = ?&#39;</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:term</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Fortunately our application has a wide variety of calls to each of the
above possibilities. Many of these variations ended up in the translator
tests.</p>

<h2>Notes/Warnings</h2>

<p>As with any software that could potentially update a wide swath of your
codebase in one (terrible) moment, it is recommended that you are
operating under some form of source control or have a reliable backup
<em>BEFORE</em> running the script.</p>

<p>The converters don&rsquo;t play well with multiline code blocks. This means
that the parser will encounter a Exception (likely SyntaxError) when
processing the first line. This is because the matching code is a simple
grep of the file. Therefore, it would only grab the first line of a
multiline statement. The good news is that these exceptions will show up
in the results.</p>

<h2>Check it out!</h2>

<p>The gem is available at <a href="https://rubygems.org/gems/arel_converter">rubygems.org</a> and the source is available on
<a href="https://github.com/pallan/arel_converter">Github</a>. Hopefully, it can
save you or your team some time and pain of trolling through thousands
of lines of code to get ready for Rails 4.1.a</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chiliproject to Redmine Converter]]></title>
    <link href="http://allanweb.ca/blog/2013/09/22/chiliproject-to-redmine-converter/"/>
    <updated>2013-09-22T20:05:00-05:00</updated>
    <id>http://allanweb.ca/blog/2013/09/22/chiliproject-to-redmine-converter</id>
    <content type="html"><![CDATA[<p>My company has been using Redmine as a basic project management tool for
many years. A couple of years ago Redmine was forked by many of the
developers to a parallel project known as Chiliproject. At the time we
studied the roadmaps and goals of each fork and decided to move to
Chiliproject. As the two projects has just separated the transition was
fairly easy.</p>

<p>Fast forward two years, Redmine has a thriving community, has upgraded
to Rails 3, releases regular updates and has a plethora of plugins.
Chiliproject as floundered in comparison. The only
updates that have been released in the past year have been to fix
security issues in Rails or Ruby.</p>

<p>It was because of this we made the fateful decision to switch back to
Redmine. Unfortunately, the projects are much farther apart in terms of
the codebase and database structure.  Add to this, Chiliproject has truly
engrained itself in our company. We needed a way to convert back to Redmine
without impacting the users.</p>

<p>After some research we came up with <a href="https://gist.github.com/pallan/6663018">this script</a> to do the job. It has fairly detailed comments, but if you notice any problems or have any comments feel free to add them to the gist.</p>

<p>Special thanks to my employer,
<a href="https://www.canadadrugs.com">CanadaDrugs.com</a>, for allowing me to post
this work back to the community.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brew, git 1.8.0 & "-bash: __git_ps1: command not found"]]></title>
    <link href="http://allanweb.ca/blog/2012/11/19/brew-git-ps-1-not-found/"/>
    <updated>2012-11-19T08:06:00-06:00</updated>
    <id>http://allanweb.ca/blog/2012/11/19/brew-git-ps-1-not-found</id>
    <content type="html"><![CDATA[<p>I updated my machine this past weekend. This included everything from <a href="http://www.apple.com/osx/">Mountain Lion</a> to <a href="http://mxcl.github.com/homebrew/">Homebrew</a> (including all formulas).</p>

<p>As part of this update I moved from git 1.7.2.x to 1.8.0. After I did so and launched a new terminal I started seeing this fun error</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-bash: __git_ps1: command not found</span></code></pre></td></tr></table></div></figure>


<p>I checked the git 1.8.0 release notes but could not see any mention of a change to the prompt scripts.  <a href="http://www.spinics.net/lists/git/msg191753.html">After much research</a> (and gnashing of teeth) I discovered that the git shell commands that were responsible for making that nice prompt were moved from contrib/completion/git-completion.bash into a separate file contrib/completion/git-prompt.sh</p>

<p>To fix it I added the following line to my ~/.bash_profile above where I defined my prompt</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source /usr/local/etc/bash_completion.d/git-prompt.sh</span></code></pre></td></tr></table></div></figure>


<p>Where /usr/local/etc/bash_completion.d is where brew puts the completion scripts it installs.</p>

<p>I am no bash guru so I will not advocate that this is the best way to fix this problem.If you are a bash guru and know a better way please comment so we can all learn something.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prefix Git Commit Message using Hooks]]></title>
    <link href="http://allanweb.ca/blog/2012/11/02/prefix-git-commit-message-using-hooks/"/>
    <updated>2012-11-02T10:01:00-05:00</updated>
    <id>http://allanweb.ca/blog/2012/11/02/prefix-git-commit-message-using-hooks</id>
    <content type="html"><![CDATA[<p>My team uses <a href="http://chiliproject.org/">Chiliproject</a> to manage our user stories. We have a team agreement to ensure that each commit message into our git repository is prefixed with the issue ID that the commit is related to. In addition to this we have a branch naming convention that also identifies the issue that branch is supposed to address.  For example, a branch name could be, &ldquo;rm-3454-customer-defect&rdquo; and (hopefully) all commit messages will be prefixed with &ldquo;RM #3454&rdquo;. Chiliproject has some nice little features with linking and styling when the &ldquo;#4233&rdquo; pattern is found. However, it can be fickle. If you forget to put in a space, for example, &ldquo;RM#3432&rdquo; none of it will work.</p>

<p>Making sure this formatting is correct can be a real pain in the a**.  Therefore, I took it upon myself to simplify things. The script below uses our branch naming convention to automatically prefix any commit message using the git &ldquo;commit-msg&rdquo; hook. You can see the code <a href="https://gist.github.com/pallan/4001241">is this gist</a>.</p>

<p>Put this code in the &ldquo;.git/hooks/commit-msg&rdquo; file at the root of your repository, make it executable and you are ready to rumble (of course, this will only work if using ruby).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord 3 based Rubygem]]></title>
    <link href="http://allanweb.ca/blog/2010/11/19/activerecord-3-based-rubygem/"/>
    <updated>2010-11-19T21:12:00-06:00</updated>
    <id>http://allanweb.ca/blog/2010/11/19/activerecord-3-based-rubygem</id>
    <content type="html"><![CDATA[<p>At our company we had to integrate with a legacy database system. To manage it we created a nice little gem to handle it. Basically the gem was just a collection of ActiveRecord models, nicely namespaced, so that we could include it in any application that made have needed access to that db. Code using the gem set it up as you would expect (in a Rails app we used a custom db connection in the database.yml):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;legacy_database&#39;</span>
</span><span class='line'><span class="ss">LegacyDatabase</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">establish_connection</span><span class="p">(</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This functioned great for many years and versions of ActiveRecord.</p>

<p>Jump forward to today, we have another separate database we need to connect to. Naturally, after the success of the previous gem we decided to create a new gem using the existing pattern, but this time we are going to use the new and fancy ActiveRecord 3 and its nice new Arel syntax.</p>

<p>We started building the gem and immediately ran into a blocker.  Using the same code as above, as soon as the require was executed we get an ActiveRecord::ConnectionNotEstablished error. Nuts!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;special_database&#39;</span> <span class="c1"># &amp;lt;= raises ActiveRecord::ConnectionNotEstablished</span>
</span><span class='line'><span class="ss">SpecialDatabase</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">establish_connection</span><span class="p">(</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The backtrace showed us that when the gem was being loaded when it hits the first scope call Arel attempts to connect to the database.  Why? I am not sure and I haven&rsquo;t had time to dig around to find out if it is even possible to fix. Its a classic chicken/egg situation. You can&rsquo;t initialize the connection until you load the gem and you can&rsquo;t load the gem without initializing the connection.</p>

<p>In our situation we aren&rsquo;t using the gem in concert with any other ActiveRecord connections so we are able to use ActiveRecord::Base to establish the connection.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;activerecord&#39;</span>
</span><span class='line'><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">establish_connection</span><span class="p">(</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;special_database&#39;</span>
</span><span class='line'><span class="ss">SpecialDatabase</span><span class="p">:</span><span class="ss">:Foo</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># It work&#39;s</span>
</span></code></pre></td></tr></table></div></figure>


<p>I really don&rsquo;t like it, but so far its our only option. Got a better solutions I&rsquo;d be happy to hear it.</p>
]]></content>
  </entry>
  
</feed>
