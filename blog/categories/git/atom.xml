<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | Peer's Corner]]></title>
  <link href="http://allanweb.ca/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://allanweb.ca/"/>
  <updated>2013-09-23T13:24:00-05:00</updated>
  <id>http://allanweb.ca/</id>
  <author>
    <name><![CDATA[Peer Allan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Brew, git 1.8.0 & "-bash: __git_ps1: command not found"]]></title>
    <link href="http://allanweb.ca/blog/2012/11/19/brew-git-ps-1-not-found/"/>
    <updated>2012-11-19T08:06:00-06:00</updated>
    <id>http://allanweb.ca/blog/2012/11/19/brew-git-ps-1-not-found</id>
    <content type="html"><![CDATA[<p>I updated my machine this past weekend. This included everything from <a href="http://www.apple.com/osx/">Mountain Lion</a> to <a href="http://mxcl.github.com/homebrew/">Homebrew</a> (including all formulas).</p>

<p>As part of this update I moved from git 1.7.2.x to 1.8.0. After I did so and launched a new terminal I started seeing this fun error</p>

<p><code>
-bash: __git_ps1: command not found
</code></p>

<p>I checked the git 1.8.0 release notes but could not see any mention of a change to the prompt scripts.  <a href="http://www.spinics.net/lists/git/msg191753.html">After much research</a> (and gnashing of teeth) I discovered that the git shell commands that were responsible for making that nice prompt were moved from contrib/completion/git-completion.bash into a separate file contrib/completion/git-prompt.sh</p>

<p>To fix it I added the following line to my ~/.bash_profile above where I defined my prompt</p>

<p><code>
source /usr/local/etc/bash_completion.d/git-prompt.sh
</code></p>

<p>Where /usr/local/etc/bash_completion.d is where brew puts the completion scripts it installs.</p>

<p>I am no bash guru so I will not advocate that this is the best way to fix this problem.If you are a bash guru and know a better way please comment so we can all learn something.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prefix Git Commit Message using Hooks]]></title>
    <link href="http://allanweb.ca/blog/2012/11/02/prefix-git-commit-message-using-hooks/"/>
    <updated>2012-11-02T10:01:00-05:00</updated>
    <id>http://allanweb.ca/blog/2012/11/02/prefix-git-commit-message-using-hooks</id>
    <content type="html"><![CDATA[<p>My team uses <a href="http://chiliproject.org/">Chiliproject</a> to manage our user stories. We have a team agreement to ensure that each commit message into our git repository is prefixed with the issue ID that the commit is related to. In addition to this we have a branch naming convention that also identifies the issue that branch is supposed to address.  For example, a branch name could be, &ldquo;rm-3454-customer-defect&rdquo; and (hopefully) all commit messages will be prefixed with &ldquo;RM #3454&rdquo;. Chiliproject has some nice little features with linking and styling when the &ldquo;#4233&rdquo; pattern is found. However, it can be fickle. If you forget to put in a space, for example, &ldquo;RM#3432&rdquo; none of it will work.</p>

<p>Making sure this formatting is correct can be a real pain in the a**.  Therefore, I took it upon myself to simplify things. The script below uses our branch naming convention to automatically prefix any commit message using the git &ldquo;commit-msg&rdquo; hook. You can see the code <a href="https://gist.github.com/pallan/4001241">is this gist</a>.</p>

<p>Put this code in the &ldquo;.git/hooks/commit-msg&rdquo; file at the root of your repository, make it executable and you are ready to rumble (of course, this will only work if using ruby).</p>
]]></content>
  </entry>
  
</feed>
