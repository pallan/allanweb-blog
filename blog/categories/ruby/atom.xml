<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Peer's Corner]]></title>
  <link href="http://allanweb.ca/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://allanweb.ca/"/>
  <updated>2013-09-24T07:14:39-05:00</updated>
  <id>http://allanweb.ca/</id>
  <author>
    <name><![CDATA[Peer Allan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Chiliproject to Redmine Converter]]></title>
    <link href="http://allanweb.ca/blog/2013/09/22/chiliproject-to-redmine-converter/"/>
    <updated>2013-09-22T20:05:00-05:00</updated>
    <id>http://allanweb.ca/blog/2013/09/22/chiliproject-to-redmine-converter</id>
    <content type="html"><![CDATA[<p>My company has been using Redmine as a basic project management tool for
many years. A couple of years ago Redmine was forked by many of the
developers to a parallel project known as Chiliproject. At the time we
studied the roadmaps and goals of each fork and decided to move to
Chiliproject. As the two projects has just separated the transition was
fairly easy.</p>

<p>Fast forward two years, Redmine has a thriving community, has upgraded
to Rails 3, releases regular updates and has a plethora of plugins.
Chiliproject as floundered in comparison. The only
updates that have been released in the past year have been to fix
security issues in Rails or Ruby.</p>

<p>It was because of this we made the fateful decision to switch back to
Redmine. Unfortunately, the projects are much farther apart in terms of
the codebase and database structure.  Add to this, Chiliproject has truly
engrained itself in our company. We needed a way to convert back to Redmine
without impacting the users.</p>

<p>After some research we came up with <a href="https://gist.github.com/pallan/6663018">this script</a> to do the job. It has fairly detailed comments, but if you notice any problems or have any comments feel free to add them to the gist.</p>

<p>Special thanks to my employer,
<a href="https://www.canadadrugs.com">CanadaDrugs.com</a>, for allowing me to post
this work back to the community.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prefix Git Commit Message using Hooks]]></title>
    <link href="http://allanweb.ca/blog/2012/11/02/prefix-git-commit-message-using-hooks/"/>
    <updated>2012-11-02T10:01:00-05:00</updated>
    <id>http://allanweb.ca/blog/2012/11/02/prefix-git-commit-message-using-hooks</id>
    <content type="html"><![CDATA[<p>My team uses <a href="http://chiliproject.org/">Chiliproject</a> to manage our user stories. We have a team agreement to ensure that each commit message into our git repository is prefixed with the issue ID that the commit is related to. In addition to this we have a branch naming convention that also identifies the issue that branch is supposed to address.  For example, a branch name could be, &ldquo;rm-3454-customer-defect&rdquo; and (hopefully) all commit messages will be prefixed with &ldquo;RM #3454&rdquo;. Chiliproject has some nice little features with linking and styling when the &ldquo;#4233&rdquo; pattern is found. However, it can be fickle. If you forget to put in a space, for example, &ldquo;RM#3432&rdquo; none of it will work.</p>

<p>Making sure this formatting is correct can be a real pain in the a**.  Therefore, I took it upon myself to simplify things. The script below uses our branch naming convention to automatically prefix any commit message using the git &ldquo;commit-msg&rdquo; hook. You can see the code <a href="https://gist.github.com/pallan/4001241">is this gist</a>.</p>

<p>Put this code in the &ldquo;.git/hooks/commit-msg&rdquo; file at the root of your repository, make it executable and you are ready to rumble (of course, this will only work if using ruby).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord 3 based Rubygem]]></title>
    <link href="http://allanweb.ca/blog/2010/11/19/activerecord-3-based-rubygem/"/>
    <updated>2010-11-19T21:12:00-06:00</updated>
    <id>http://allanweb.ca/blog/2010/11/19/activerecord-3-based-rubygem</id>
    <content type="html"><![CDATA[<p>At our company we had to integrate with a legacy database system. To manage it we created a nice little gem to handle it. Basically the gem was just a collection of ActiveRecord models, nicely namespaced, so that we could include it in any application that made have needed access to that db. Code using the gem set it up as you would expect (in a Rails app we used a custom db connection in the database.yml):</p>

<p><code>ruby
require 'legacy_database'
LegacyDatabase::Base.establish_connection(...)
</code></p>

<p>This functioned great for many years and versions of ActiveRecord.</p>

<p>Jump forward to today, we have another separate database we need to connect to. Naturally, after the success of the previous gem we decided to create a new gem using the existing pattern, but this time we are going to use the new and fancy ActiveRecord 3 and its nice new Arel syntax.</p>

<p>We started building the gem and immediately ran into a blocker.  Using the same code as above, as soon as the require was executed we get an ActiveRecord::ConnectionNotEstablished error. Nuts!</p>

<p><code>ruby
require 'special_database' # &amp;lt;= raises ActiveRecord::ConnectionNotEstablished
SpecialDatabase::Base.establish_connection(...)
</code></p>

<p>The backtrace showed us that when the gem was being loaded when it hits the first scope call Arel attempts to connect to the database.  Why? I am not sure and I haven&rsquo;t had time to dig around to find out if it is even possible to fix. Its a classic chicken/egg situation. You can&rsquo;t initialize the connection until you load the gem and you can&rsquo;t load the gem without initializing the connection.</p>

<p>In our situation we aren&rsquo;t using the gem in concert with any other ActiveRecord connections so we are able to use ActiveRecord::Base to establish the connection.</p>

<p>```ruby
require &lsquo;activerecord&rsquo;
ActiveRecord::Base.establish_connection(&hellip;)</p>

<p>require &lsquo;special_database&rsquo;
SpecialDatabase::Foo.find(1)  # It work&rsquo;s
```</p>

<p>I really don&rsquo;t like it, but so far its our only option. Got a better solutions I&rsquo;d be happy to hear it.</p>
]]></content>
  </entry>
  
</feed>
